name: build and push tfstate file in s3

on: 
  push:
    branches: [ master ]

jobs:
  
  build:
    
    name: 'Terraform Validate, Init and Plan'
    runs-on: ubuntu-latest

   
    steps:

      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-2

      # The terraform fmt command is used to format your configuration files into a canonical format and style
      - name: 'Terraform Format'
        uses: 'dflook/terraform-fmt-check@v1'
        with:
          actions_subcommand: 'fmt'

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: "Terraform Init"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_subcommand: "init"
          tf_actions_version: 1.3.6
          tf_actions_working_dir: .
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB }}'
          # TF_CLI_ARGS: "-backend-config=token=${{ secrets.TF_API_TOKEN }}"

      # The terraform validate command validates the configuration files in a directory, referring only to the configuration
      - name: 'Terraform validate'
        uses: dflook/terraform-validate@v1
        with:
          tf_actions_working_dir: .

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          # cd ${{ inputs.working_directory }}
          # if [ -n "${{ inputs.var_file }}" ]; then
          # terraform plan -detailed-exitcode -no-color -out tfplan --var-file=${{ inputs.var_file }} || export exitcode=$?
          # else
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          # fi
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
